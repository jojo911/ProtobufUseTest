// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.hello.proto
#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "im.hello.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace im {

namespace {

const ::google::protobuf::Descriptor* hello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hello_reflection_ = NULL;
const ::google::protobuf::Descriptor* all_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  all_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_im_2ehello_2eproto() {
  protobuf_AddDesc_im_2ehello_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "im.hello.proto");
  GOOGLE_CHECK(file != NULL);
  hello_descriptor_ = file->message_type(0);
  static const int hello_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello, value_),
  };
  hello_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hello_descriptor_,
      hello::default_instance_,
      hello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello, _has_bits_[0]),
      -1,
      -1,
      sizeof(hello),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello, _internal_metadata_),
      -1);
  all_descriptor_ = file->message_type(1);
  static const int all_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all, t_),
  };
  all_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      all_descriptor_,
      all::default_instance_,
      all_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all, _has_bits_[0]),
      -1,
      -1,
      sizeof(all),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all, _internal_metadata_),
      -1);
  status_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_im_2ehello_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hello_descriptor_, &hello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      all_descriptor_, &all::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_im_2ehello_2eproto() {
  delete hello::default_instance_;
  delete hello_reflection_;
  delete all::default_instance_;
  delete all_reflection_;
}

void protobuf_AddDesc_im_2ehello_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016im.hello.proto\022\002im\";\n\005hello\022\n\n\002id\030\001 \002("
    "\005\022\013\n\003str\030\002 \002(\t\022\031\n\005value\030\003 \001(\0162\n.im.statu"
    "s\"\'\n\003all\022\n\n\002id\030\001 \002(\005\022\024\n\001t\030\002 \002(\0132\t.im.hel"
    "lo*\033\n\006status\022\007\n\003suc\020e\022\010\n\004fail\020f", 151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "im.hello.proto", &protobuf_RegisterTypes);
  hello::default_instance_ = new hello();
  all::default_instance_ = new all();
  hello::default_instance_->InitAsDefaultInstance();
  all::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_im_2ehello_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_im_2ehello_2eproto {
  StaticDescriptorInitializer_im_2ehello_2eproto() {
    protobuf_AddDesc_im_2ehello_2eproto();
  }
} static_descriptor_initializer_im_2ehello_2eproto_;
const ::google::protobuf::EnumDescriptor* status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return status_descriptor_;
}
bool status_IsValid(int value) {
  switch(value) {
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int hello::kIdFieldNumber;
const int hello::kStrFieldNumber;
const int hello::kValueFieldNumber;
#endif  // !_MSC_VER

hello::hello()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.hello)
}

void hello::InitAsDefaultInstance() {
}

hello::hello(const hello& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.hello)
}

void hello::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 101;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hello::~hello() {
  // @@protoc_insertion_point(destructor:im.hello)
  SharedDtor();
}

void hello::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void hello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hello_descriptor_;
}

const hello& hello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2ehello_2eproto();
  return *default_instance_;
}

hello* hello::default_instance_ = NULL;

hello* hello::New(::google::protobuf::Arena* arena) const {
  hello* n = new hello;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hello::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = 0;
    if (has_str()) {
      str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    value_ = 101;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool hello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.hello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }

      // required string str = 2;
      case 2: {
        if (tag == 18) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "im.hello.str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional .im.status value = 3;
      case 3: {
        if (tag == 24) {
         parse_value:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::im::status_IsValid(value)) {
            set_value(static_cast< ::im::status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.hello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.hello)
  return false;
#undef DO_
}

void hello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.hello)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "im.hello.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->str(), output);
  }

  // optional .im.status value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:im.hello)
}

::google::protobuf::uint8* hello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.hello)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "im.hello.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }

  // optional .im.status value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.hello)
  return target;
}

int hello::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_str()) {
    // required string str = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str());
  }

  return total_size;
}
int hello::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required string str = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .im.status value = 3;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hello::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hello::MergeFrom(const hello& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_str()) {
      set_has_str();
      str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void hello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hello::CopyFrom(const hello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hello::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void hello::Swap(hello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hello::InternalSwap(hello* other) {
  std::swap(id_, other->id_);
  str_.Swap(&other->str_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hello_descriptor_;
  metadata.reflection = hello_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hello

// required int32 id = 1;
 bool hello::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void hello::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void hello::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void hello::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 hello::id() const {
  // @@protoc_insertion_point(field_get:im.hello.id)
  return id_;
}
 void hello::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:im.hello.id)
}

// required string str = 2;
 bool hello::has_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void hello::set_has_str() {
  _has_bits_[0] |= 0x00000002u;
}
 void hello::clear_has_str() {
  _has_bits_[0] &= ~0x00000002u;
}
 void hello::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str();
}
 const ::std::string& hello::str() const {
  // @@protoc_insertion_point(field_get:im.hello.str)
  return str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void hello::set_str(const ::std::string& value) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.hello.str)
}
 void hello::set_str(const char* value) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.hello.str)
}
 void hello::set_str(const char* value, size_t size) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.hello.str)
}
 ::std::string* hello::mutable_str() {
  set_has_str();
  // @@protoc_insertion_point(field_mutable:im.hello.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* hello::release_str() {
  clear_has_str();
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void hello::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    set_has_str();
  } else {
    clear_has_str();
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:im.hello.str)
}

// optional .im.status value = 3;
 bool hello::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void hello::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
 void hello::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
 void hello::clear_value() {
  value_ = 101;
  clear_has_value();
}
 ::im::status hello::value() const {
  // @@protoc_insertion_point(field_get:im.hello.value)
  return static_cast< ::im::status >(value_);
}
 void hello::set_value(::im::status value) {
  assert(::im::status_IsValid(value));
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:im.hello.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int all::kIdFieldNumber;
const int all::kTFieldNumber;
#endif  // !_MSC_VER

all::all()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.all)
}

void all::InitAsDefaultInstance() {
  t_ = const_cast< ::im::hello*>(&::im::hello::default_instance());
}

all::all(const all& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.all)
}

void all::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  t_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

all::~all() {
  // @@protoc_insertion_point(destructor:im.all)
  SharedDtor();
}

void all::SharedDtor() {
  if (this != default_instance_) {
    delete t_;
  }
}

void all::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* all::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return all_descriptor_;
}

const all& all::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2ehello_2eproto();
  return *default_instance_;
}

all* all::default_instance_ = NULL;

all* all::New(::google::protobuf::Arena* arena) const {
  all* n = new all;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void all::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_t()) {
      if (t_ != NULL) t_->::im::hello::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool all::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.all)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_t;
        break;
      }

      // required .im.hello t = 2;
      case 2: {
        if (tag == 18) {
         parse_t:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.all)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.all)
  return false;
#undef DO_
}

void all::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.all)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .im.hello t = 2;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->t_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:im.all)
}

::google::protobuf::uint8* all::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.all)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .im.hello t = 2;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->t_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.all)
  return target;
}

int all::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_t()) {
    // required .im.hello t = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->t_);
  }

  return total_size;
}
int all::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required .im.hello t = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->t_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void all::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const all* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const all*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void all::MergeFrom(const all& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_t()) {
      mutable_t()->::im::hello::MergeFrom(from.t());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void all::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void all::CopyFrom(const all& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool all::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_t()) {
    if (!this->t_->IsInitialized()) return false;
  }
  return true;
}

void all::Swap(all* other) {
  if (other == this) return;
  InternalSwap(other);
}
void all::InternalSwap(all* other) {
  std::swap(id_, other->id_);
  std::swap(t_, other->t_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata all::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = all_descriptor_;
  metadata.reflection = all_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// all

// required int32 id = 1;
 bool all::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void all::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void all::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void all::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 all::id() const {
  // @@protoc_insertion_point(field_get:im.all.id)
  return id_;
}
 void all::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:im.all.id)
}

// required .im.hello t = 2;
 bool all::has_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void all::set_has_t() {
  _has_bits_[0] |= 0x00000002u;
}
 void all::clear_has_t() {
  _has_bits_[0] &= ~0x00000002u;
}
 void all::clear_t() {
  if (t_ != NULL) t_->::im::hello::Clear();
  clear_has_t();
}
 const ::im::hello& all::t() const {
  // @@protoc_insertion_point(field_get:im.all.t)
  return t_ != NULL ? *t_ : *default_instance_->t_;
}
 ::im::hello* all::mutable_t() {
  set_has_t();
  if (t_ == NULL) {
    t_ = new ::im::hello;
  }
  // @@protoc_insertion_point(field_mutable:im.all.t)
  return t_;
}
 ::im::hello* all::release_t() {
  clear_has_t();
  ::im::hello* temp = t_;
  t_ = NULL;
  return temp;
}
 void all::set_allocated_t(::im::hello* t) {
  delete t_;
  t_ = t;
  if (t) {
    set_has_t();
  } else {
    clear_has_t();
  }
  // @@protoc_insertion_point(field_set_allocated:im.all.t)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace im

// @@protoc_insertion_point(global_scope)
